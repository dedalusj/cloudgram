// !!! DO NOT EDIT !!! -- automatically generated by scripts/assets.ts

const alb = new URL('../../images/aws/alb.svg', import.meta.url);
const alexaForBusiness = new URL('../../images/aws/alexa-for-business.svg', import.meta.url);
const amplifyConsole = new URL('../../images/aws/amplify-console.svg', import.meta.url);
const apacheMxnet = new URL('../../images/aws/apache-mxnet.svg', import.meta.url);
const apiGateway = new URL('../../images/aws/api-gateway.svg', import.meta.url);
const apiGatewayEndpoint = new URL('../../images/aws/api-gateway_endpoint.svg', import.meta.url);
const appConfig = new URL('../../images/aws/app-config.svg', import.meta.url);
const appMesh = new URL('../../images/aws/app-mesh.svg', import.meta.url);
const appMeshMesh = new URL('../../images/aws/app-mesh_mesh.svg', import.meta.url);
const appMeshVirtualGateway = new URL('../../images/aws/app-mesh_virtual-gateway.svg', import.meta.url);
const appMeshVirtualNode = new URL('../../images/aws/app-mesh_virtual-node.svg', import.meta.url);
const appMeshVirtualRouter = new URL('../../images/aws/app-mesh_virtual-router.svg', import.meta.url);
const appMeshVirtualService = new URL('../../images/aws/app-mesh_virtual-service.svg', import.meta.url);
const appStream = new URL('../../images/aws/app-stream.svg', import.meta.url);
const appWizard = new URL('../../images/aws/app-wizard.svg', import.meta.url);
const applicationAutoScaling = new URL('../../images/aws/application-auto-scaling.svg', import.meta.url);
const applicationDiscoveryService = new URL('../../images/aws/application-discovery-service.svg', import.meta.url);
const appsync = new URL('../../images/aws/appsync.svg', import.meta.url);
const artifact = new URL('../../images/aws/artifact.svg', import.meta.url);
const athena = new URL('../../images/aws/athena.svg', import.meta.url);
const augmentedAiA2I = new URL('../../images/aws/augmented-ai-a2i.svg', import.meta.url);
const aurora = new URL('../../images/aws/aurora.svg', import.meta.url);
const auroraInstance = new URL('../../images/aws/aurora-instance.svg', import.meta.url);
const auroraInstanceAlternate = new URL('../../images/aws/aurora-instance-alternate.svg', import.meta.url);
const auroraMariadbInstance = new URL('../../images/aws/aurora-mariadb-instance.svg', import.meta.url);
const auroraMariadbInstanceAlternate = new URL(
  '../../images/aws/aurora-mariadb-instance-alternate.svg',
  import.meta.url
);
const auroraMysqlInstance = new URL('../../images/aws/aurora-mysql-instance.svg', import.meta.url);
const auroraMysqlInstanceAlternate = new URL('../../images/aws/aurora-mysql-instance-alternate.svg', import.meta.url);
const auroraOracleInstance = new URL('../../images/aws/aurora-oracle-instance.svg', import.meta.url);
const auroraOracleInstanceAlternate = new URL('../../images/aws/aurora-oracle-instance-alternate.svg', import.meta.url);
const auroraPiops = new URL('../../images/aws/aurora-piops.svg', import.meta.url);
const auroraPostgresqlInstance = new URL('../../images/aws/aurora-postgresql-instance.svg', import.meta.url);
const auroraPostgresqlInstanceAlternate = new URL(
  '../../images/aws/aurora-postgresql-instance-alternate.svg',
  import.meta.url
);
const auroraSqlServerInstance = new URL('../../images/aws/aurora-sql-server-instance.svg', import.meta.url);
const auroraSqlServerInstanceAlternate = new URL(
  '../../images/aws/aurora-sql-server-instance-alternate.svg',
  import.meta.url
);
const autoScaling = new URL('../../images/aws/auto-scaling.svg', import.meta.url);
const backintAgent = new URL('../../images/aws/backint-agent.svg', import.meta.url);
const backup = new URL('../../images/aws/backup.svg', import.meta.url);
const batch = new URL('../../images/aws/batch.svg', import.meta.url);
const bottlerocket = new URL('../../images/aws/bottlerocket.svg', import.meta.url);
const braket = new URL('../../images/aws/braket.svg', import.meta.url);
const budgets = new URL('../../images/aws/budgets.svg', import.meta.url);
const certificateManager = new URL('../../images/aws/certificate-manager.svg', import.meta.url);
const certificateManagerCertificateAuthority = new URL(
  '../../images/aws/certificate-manager_certificate-authority.svg',
  import.meta.url
);
const chatbot = new URL('../../images/aws/chatbot.svg', import.meta.url);
const chime = new URL('../../images/aws/chime.svg', import.meta.url);
const client = new URL('../../images/aws/client.svg', import.meta.url);
const cloud9 = new URL('../../images/aws/cloud9.svg', import.meta.url);
const cloudDevelopmentKit = new URL('../../images/aws/cloud-development-kit.svg', import.meta.url);
const cloudDirectory = new URL('../../images/aws/cloud-directory.svg', import.meta.url);
const cloudMapNamespace = new URL('../../images/aws/cloud-map_namespace.svg', import.meta.url);
const cloudMapResource = new URL('../../images/aws/cloud-map_resource.svg', import.meta.url);
const cloudMapService = new URL('../../images/aws/cloud-map_service.svg', import.meta.url);
const cloudTrail = new URL('../../images/aws/cloud-trail.svg', import.meta.url);
const cloudendureDisasterRecovery = new URL('../../images/aws/cloudendure-disaster-recovery.svg', import.meta.url);
const cloudendureMigration = new URL('../../images/aws/cloudendure-migration.svg', import.meta.url);
const cloudformation = new URL('../../images/aws/cloudformation.svg', import.meta.url);
const cloudformationChangeSet = new URL('../../images/aws/cloudformation_change-set.svg', import.meta.url);
const cloudformationStack = new URL('../../images/aws/cloudformation_stack.svg', import.meta.url);
const cloudformationTemplate = new URL('../../images/aws/cloudformation_template.svg', import.meta.url);
const cloudfront = new URL('../../images/aws/cloudfront.svg', import.meta.url);
const cloudfrontDownloadDistribution = new URL(
  '../../images/aws/cloudfront_download-distribution.svg',
  import.meta.url
);
const cloudfrontEdgeLocation = new URL('../../images/aws/cloudfront_edge-location.svg', import.meta.url);
const cloudfrontStreamingDistribution = new URL(
  '../../images/aws/cloudfront_streaming-distribution.svg',
  import.meta.url
);
const cloudhsm = new URL('../../images/aws/cloudhsm.svg', import.meta.url);
const cloudmap = new URL('../../images/aws/cloudmap.svg', import.meta.url);
const cloudsearch = new URL('../../images/aws/cloudsearch.svg', import.meta.url);
const cloudsearchSearchDocuments = new URL('../../images/aws/cloudsearch_search-documents.svg', import.meta.url);
const cloudwatch = new URL('../../images/aws/cloudwatch.svg', import.meta.url);
const cloudwatchAlarm = new URL('../../images/aws/cloudwatch_alarm.svg', import.meta.url);
const cloudwatchEventBased = new URL('../../images/aws/cloudwatch_event-based.svg', import.meta.url);
const cloudwatchEventTimeBased = new URL('../../images/aws/cloudwatch_event-time-based.svg', import.meta.url);
const cloudwatchLogs = new URL('../../images/aws/cloudwatch_logs.svg', import.meta.url);
const cloudwatchRule = new URL('../../images/aws/cloudwatch_rule.svg', import.meta.url);
const codeartifact = new URL('../../images/aws/codeartifact.svg', import.meta.url);
const codebuild = new URL('../../images/aws/codebuild.svg', import.meta.url);
const codecommit = new URL('../../images/aws/codecommit.svg', import.meta.url);
const codedeploy = new URL('../../images/aws/codedeploy.svg', import.meta.url);
const codeguru = new URL('../../images/aws/codeguru.svg', import.meta.url);
const codepipeline = new URL('../../images/aws/codepipeline.svg', import.meta.url);
const codestar = new URL('../../images/aws/codestar.svg', import.meta.url);
const cognito = new URL('../../images/aws/cognito.svg', import.meta.url);
const commandLineInterface = new URL('../../images/aws/command-line-interface.svg', import.meta.url);
const comprehend = new URL('../../images/aws/comprehend.svg', import.meta.url);
const computeOptimizer = new URL('../../images/aws/compute-optimizer.svg', import.meta.url);
const config = new URL('../../images/aws/config.svg', import.meta.url);
const connect = new URL('../../images/aws/connect.svg', import.meta.url);
const consoleMobileApplication = new URL('../../images/aws/console-mobile-application.svg', import.meta.url);
const controlTower = new URL('../../images/aws/control-tower.svg', import.meta.url);
const costAndUsageReport = new URL('../../images/aws/cost-and-usage-report.svg', import.meta.url);
const costExplorer = new URL('../../images/aws/cost-explorer.svg', import.meta.url);
const dataExchange = new URL('../../images/aws/data-exchange.svg', import.meta.url);
const dataPipeline = new URL('../../images/aws/data-pipeline.svg', import.meta.url);
const dataSync = new URL('../../images/aws/data-sync.svg', import.meta.url);
const databaseAmazonRdsProxy = new URL('../../images/aws/database_amazon-rds-proxy.svg', import.meta.url);
const databaseAmazonRdsProxyAlternate = new URL(
  '../../images/aws/database_amazon-rds-proxy-alternate.svg',
  import.meta.url
);
const databaseMigration = new URL('../../images/aws/database-migration.svg', import.meta.url);
const databaseMigrationWorkflowJob = new URL('../../images/aws/database-migration-workflow-job.svg', import.meta.url);
const datasyncAgent = new URL('../../images/aws/datasync_agent.svg', import.meta.url);
const deepComposer = new URL('../../images/aws/deep-composer.svg', import.meta.url);
const deepLearningAmis = new URL('../../images/aws/deep-learning-amis.svg', import.meta.url);
const deepLearningContainers = new URL('../../images/aws/deep-learning-containers.svg', import.meta.url);
const deepLens = new URL('../../images/aws/deep-lens.svg', import.meta.url);
const deepracer = new URL('../../images/aws/deepracer.svg', import.meta.url);
const detective = new URL('../../images/aws/detective.svg', import.meta.url);
const deviceFarm = new URL('../../images/aws/device-farm.svg', import.meta.url);
const directConnect = new URL('../../images/aws/direct-connect.svg', import.meta.url);
const directConnectGateway = new URL('../../images/aws/direct-connect_gateway.svg', import.meta.url);
const directoryService = new URL('../../images/aws/directory-service.svg', import.meta.url);
const directoryServiceAdConnector = new URL('../../images/aws/directory-service_ad-connector.svg', import.meta.url);
const directoryServiceAwsManagedMicrosoftAd = new URL(
  '../../images/aws/directory-service_aws-managed-microsoft-ad.svg',
  import.meta.url
);
const directoryServiceSimpleAd = new URL('../../images/aws/directory-service_simple-ad.svg', import.meta.url);
const disk = new URL('../../images/aws/disk.svg', import.meta.url);
const documentdb = new URL('../../images/aws/documentdb.svg', import.meta.url);
const dynamodb = new URL('../../images/aws/dynamodb.svg', import.meta.url);
const dynamodbAmazonDynamodbAccelerator = new URL(
  '../../images/aws/dynamodb_amazon-dynamodb-accelerator.svg',
  import.meta.url
);
const dynamodbAttribute = new URL('../../images/aws/dynamodb_attribute.svg', import.meta.url);
const dynamodbAttributes = new URL('../../images/aws/dynamodb_attributes.svg', import.meta.url);
const dynamodbGlobalSecondaryIndex = new URL('../../images/aws/dynamodb_global-secondary-index.svg', import.meta.url);
const dynamodbItem = new URL('../../images/aws/dynamodb_item.svg', import.meta.url);
const dynamodbItems = new URL('../../images/aws/dynamodb_items.svg', import.meta.url);
const dynamodbTable = new URL('../../images/aws/dynamodb_table.svg', import.meta.url);
const ebs = new URL('../../images/aws/ebs.svg', import.meta.url);
const ebsMultipleVolumes = new URL('../../images/aws/ebs_multiple-volumes.svg', import.meta.url);
const ebsSnapshot = new URL('../../images/aws/ebs_snapshot.svg', import.meta.url);
const ebsVolume = new URL('../../images/aws/ebs_volume.svg', import.meta.url);
const ec2 = new URL('../../images/aws/ec2.svg', import.meta.url);
const ec2A1Instance = new URL('../../images/aws/ec2_a1-instance.svg', import.meta.url);
const ec2AmiResource = new URL('../../images/aws/ec2_ami_resource.svg', import.meta.url);
const ec2AutoScaling = new URL('../../images/aws/ec2_auto-scaling.svg', import.meta.url);
const ec2AwsInferentia = new URL('../../images/aws/ec2_aws-inferentia.svg', import.meta.url);
const ec2C4Instance = new URL('../../images/aws/ec2_c4-instance.svg', import.meta.url);
const ec2C5Instance = new URL('../../images/aws/ec2_c5-instance.svg', import.meta.url);
const ec2C5NInstance = new URL('../../images/aws/ec2_c5n-instance.svg', import.meta.url);
const ec2C6GInstance = new URL('../../images/aws/ec2_c6g-instance.svg', import.meta.url);
const ec2D2Instance = new URL('../../images/aws/ec2_d2-instance.svg', import.meta.url);
const ec2DbInstance = new URL('../../images/aws/ec2_db-instance.svg', import.meta.url);
const ec2ElasticIpAddress = new URL('../../images/aws/ec2_elastic-ip-address.svg', import.meta.url);
const ec2F1Instance = new URL('../../images/aws/ec2_f1-instance.svg', import.meta.url);
const ec2G3Instance = new URL('../../images/aws/ec2_g3-instance.svg', import.meta.url);
const ec2H1Instance = new URL('../../images/aws/ec2_h1-instance.svg', import.meta.url);
const ec2HmiInstance = new URL('../../images/aws/ec2_hmi-instance.svg', import.meta.url);
const ec2I3Instance = new URL('../../images/aws/ec2_i3-instance.svg', import.meta.url);
const ec2ImageBuilder = new URL('../../images/aws/ec2-image-builder.svg', import.meta.url);
const ec2Instance = new URL('../../images/aws/ec2_instance.svg', import.meta.url);
const ec2InstanceWithCloudwatch = new URL('../../images/aws/ec2_instance-with-cloudwatch.svg', import.meta.url);
const ec2Instances = new URL('../../images/aws/ec2_instances.svg', import.meta.url);
const ec2M4Instance = new URL('../../images/aws/ec2_m4-instance.svg', import.meta.url);
const ec2M5AInstance = new URL('../../images/aws/ec2_m5a-instance.svg', import.meta.url);
const ec2M5Instance = new URL('../../images/aws/ec2_m5-instance.svg', import.meta.url);
const ec2M5N = new URL('../../images/aws/ec2-m5n.svg', import.meta.url);
const ec2M5NInstance = new URL('../../images/aws/ec2_m5n-instance.svg', import.meta.url);
const ec2M6GInstance = new URL('../../images/aws/ec2_m6g-instance.svg', import.meta.url);
const ec2P2Instance = new URL('../../images/aws/ec2_p2-instance.svg', import.meta.url);
const ec2P3Instance = new URL('../../images/aws/ec2_p3-instance.svg', import.meta.url);
const ec2R4Instance = new URL('../../images/aws/ec2_r4-instance.svg', import.meta.url);
const ec2R5AInstance = new URL('../../images/aws/ec2_r5a-instance.svg', import.meta.url);
const ec2R5Instance = new URL('../../images/aws/ec2_r5-instance.svg', import.meta.url);
const ec2R5N = new URL('../../images/aws/ec2-r5n.svg', import.meta.url);
const ec2R5NInstance = new URL('../../images/aws/ec2_r5n-instance.svg', import.meta.url);
const ec2R6GInstance = new URL('../../images/aws/ec2_r6g-instance.svg', import.meta.url);
const ec2Rescue = new URL('../../images/aws/ec2_rescue.svg', import.meta.url);
const ec2SpotInstance = new URL('../../images/aws/ec2_spot-instance.svg', import.meta.url);
const ec2T2Instance = new URL('../../images/aws/ec2_t2-instance.svg', import.meta.url);
const ec2T3Instance = new URL('../../images/aws/ec2_t3-instance.svg', import.meta.url);
const ec2X1EInstance = new URL('../../images/aws/ec2_x1e-instance.svg', import.meta.url);
const ec2X1Instance = new URL('../../images/aws/ec2_x1-instance.svg', import.meta.url);
const ec2Z1DInstance = new URL('../../images/aws/ec2_z1d-instance.svg', import.meta.url);
const ecr = new URL('../../images/aws/ecr.svg', import.meta.url);
const ecrImage = new URL('../../images/aws/ecr_image.svg', import.meta.url);
const ecrRegistry = new URL('../../images/aws/ecr_registry.svg', import.meta.url);
const ecs = new URL('../../images/aws/ecs.svg', import.meta.url);
const ecsContainer1 = new URL('../../images/aws/ecs_container-1.svg', import.meta.url);
const ecsContainer2 = new URL('../../images/aws/ecs_container-2.svg', import.meta.url);
const ecsContainer3 = new URL('../../images/aws/ecs_container-3.svg', import.meta.url);
const ecsService = new URL('../../images/aws/ecs_service.svg', import.meta.url);
const ecsTask = new URL('../../images/aws/ecs_task.svg', import.meta.url);
const efs = new URL('../../images/aws/efs.svg', import.meta.url);
const efsFileSystem = new URL('../../images/aws/efs_file-system.svg', import.meta.url);
const elasticBeanstalk = new URL('../../images/aws/elastic-beanstalk.svg', import.meta.url);
const elasticBeanstalkApplication = new URL('../../images/aws/elastic-beanstalk_application.svg', import.meta.url);
const elasticBeanstalkDeployment = new URL('../../images/aws/elastic-beanstalk_deployment.svg', import.meta.url);
const elasticContainerKubernetes = new URL('../../images/aws/elastic-container-kubernetes.svg', import.meta.url);
const elasticInference = new URL('../../images/aws/elastic-inference.svg', import.meta.url);
const elasticTranscoder = new URL('../../images/aws/elastic-transcoder.svg', import.meta.url);
const elasticache = new URL('../../images/aws/elasticache.svg', import.meta.url);
const elasticacheCacheNode = new URL('../../images/aws/elasticache_cache-node.svg', import.meta.url);
const elasticacheForMemcached = new URL('../../images/aws/elasticache-for-memcached.svg', import.meta.url);
const elasticacheForRedis = new URL('../../images/aws/elasticache-for-redis.svg', import.meta.url);
const elasticsearchService = new URL('../../images/aws/elasticsearch-service.svg', import.meta.url);
const elb = new URL('../../images/aws/elb.svg', import.meta.url);
const elbClassicLoadBalancer = new URL('../../images/aws/elb_classic-load-balancer.svg', import.meta.url);
const elementalAppliancesAndSoftware = new URL(
  '../../images/aws/elemental-appliances-and-software.svg',
  import.meta.url
);
const elementalLink = new URL('../../images/aws/elemental-link.svg', import.meta.url);
const elementalMediaconnect = new URL('../../images/aws/elemental-mediaconnect.svg', import.meta.url);
const elementalMediaconvert = new URL('../../images/aws/elemental-mediaconvert.svg', import.meta.url);
const elementalMedialive = new URL('../../images/aws/elemental-medialive.svg', import.meta.url);
const elementalMediapackage = new URL('../../images/aws/elemental-mediapackage.svg', import.meta.url);
const elementalMediastore = new URL('../../images/aws/elemental-mediastore.svg', import.meta.url);
const elementalMediatailor = new URL('../../images/aws/elemental-mediatailor.svg', import.meta.url);
const email = new URL('../../images/aws/email.svg', import.meta.url);
const emr = new URL('../../images/aws/emr.svg', import.meta.url);
const emrCluster = new URL('../../images/aws/emr_cluster.svg', import.meta.url);
const emrEngine = new URL('../../images/aws/emr-engine.svg', import.meta.url);
const emrEngineMaprM3 = new URL('../../images/aws/emr-engine-mapr-m3.svg', import.meta.url);
const emrEngineMaprM5 = new URL('../../images/aws/emr-engine-mapr-m5.svg', import.meta.url);
const emrEngineMaprM7 = new URL('../../images/aws/emr-engine-mapr-m7.svg', import.meta.url);
const emrHdfsCluster = new URL('../../images/aws/emr_hdfs-cluster.svg', import.meta.url);
const eventbridge = new URL('../../images/aws/eventbridge.svg', import.meta.url);
const eventbridgeCustomEventBus = new URL('../../images/aws/eventbridge_custom-event-bus.svg', import.meta.url);
const eventbridgeDefaultEventBus = new URL('../../images/aws/eventbridge_default-event-bus.svg', import.meta.url);
const eventbridgeEvent = new URL('../../images/aws/eventbridge-event.svg', import.meta.url);
const eventbridgeRule = new URL('../../images/aws/eventbridge_rule.svg', import.meta.url);
const eventbridgeSaasPartnerEvent = new URL('../../images/aws/eventbridge-saas-partner-event.svg', import.meta.url);
const expressWorkflow = new URL('../../images/aws/express-workflow.svg', import.meta.url);
const fargate = new URL('../../images/aws/fargate.svg', import.meta.url);
const firewall = new URL('../../images/aws/firewall.svg', import.meta.url);
const firewallManager = new URL('../../images/aws/firewall-manager.svg', import.meta.url);
const forecast = new URL('../../images/aws/forecast.svg', import.meta.url);
const forums = new URL('../../images/aws/forums.svg', import.meta.url);
const fraudDetector = new URL('../../images/aws/fraud-detector.svg', import.meta.url);
const freertos = new URL('../../images/aws/freertos.svg', import.meta.url);
const fsx = new URL('../../images/aws/fsx.svg', import.meta.url);
const fsxForLustre = new URL('../../images/aws/fsx-for-lustre.svg', import.meta.url);
const fsxForWfs = new URL('../../images/aws/fsx-for-wfs.svg', import.meta.url);
const gamelift = new URL('../../images/aws/gamelift.svg', import.meta.url);
const general = new URL('../../images/aws/general.svg', import.meta.url);
const generalAlternate = new URL('../../images/aws/general-alternate.svg', import.meta.url);
const genericDatabase = new URL('../../images/aws/generic-database.svg', import.meta.url);
const glacier = new URL('../../images/aws/glacier.svg', import.meta.url);
const globalAccelerator = new URL('../../images/aws/global-accelerator.svg', import.meta.url);
const glue = new URL('../../images/aws/glue.svg', import.meta.url);
const glueCrawler = new URL('../../images/aws/glue_crawler.svg', import.meta.url);
const glueDataCatalog = new URL('../../images/aws/glue_data-catalog.svg', import.meta.url);
const groundStation = new URL('../../images/aws/ground-station.svg', import.meta.url);
const guardduty = new URL('../../images/aws/guardduty.svg', import.meta.url);
const iam = new URL('../../images/aws/iam.svg', import.meta.url);
const iamAccessAnalyzer = new URL('../../images/aws/iam-access-analyzer.svg', import.meta.url);
const iamAddOn = new URL('../../images/aws/iam_add-on.svg', import.meta.url);
const iamDataEncryptionKey = new URL('../../images/aws/iam_data-encryption-key.svg', import.meta.url);
const iamEncryptedData = new URL('../../images/aws/iam_encrypted-data.svg', import.meta.url);
const iamLongTermSecurityCredential = new URL(
  '../../images/aws/iam_long-term-security-credential.svg',
  import.meta.url
);
const iamMfaToken = new URL('../../images/aws/iam_mfa-token.svg', import.meta.url);
const iamPermissions = new URL('../../images/aws/iam_permissions.svg', import.meta.url);
const iamRole = new URL('../../images/aws/iam_role.svg', import.meta.url);
const iamSts = new URL('../../images/aws/iam-sts.svg', import.meta.url);
const iamStsAlternate = new URL('../../images/aws/iam-sts-alternate.svg', import.meta.url);
const iamTemporarySecurityCredential = new URL(
  '../../images/aws/iam_temporary-security-credential.svg',
  import.meta.url
);
const infrequentAccessStorageClass = new URL('../../images/aws/infrequent-access-storage-class.svg', import.meta.url);
const inspector = new URL('../../images/aws/inspector.svg', import.meta.url);
const inspectorAgent = new URL('../../images/aws/inspector_agent.svg', import.meta.url);
const interactiveVideo = new URL('../../images/aws/interactive-video.svg', import.meta.url);
const internetAlt1 = new URL('../../images/aws/internet-alt1.svg', import.meta.url);
const internetAlt2 = new URL('../../images/aws/internet-alt2.svg', import.meta.url);
const internetGateway = new URL('../../images/aws/internet-gateway.svg', import.meta.url);
const iot1Click = new URL('../../images/aws/iot-1-click.svg', import.meta.url);
const iotAction = new URL('../../images/aws/iot_action.svg', import.meta.url);
const iotActuator = new URL('../../images/aws/iot_actuator.svg', import.meta.url);
const iotAlexaEnabledDevice = new URL('../../images/aws/iot_alexa_enabled-device.svg', import.meta.url);
const iotAlexaSkill = new URL('../../images/aws/iot_alexa_skill.svg', import.meta.url);
const iotAlexaVoiceService = new URL('../../images/aws/iot_alexa_voice-service.svg', import.meta.url);
const iotAnalytics = new URL('../../images/aws/iot-analytics.svg', import.meta.url);
const iotAnalyticsChannel = new URL('../../images/aws/iot-analytics_channel.svg', import.meta.url);
const iotAnalyticsDataSet = new URL('../../images/aws/iot-analytics_data-set.svg', import.meta.url);
const iotAnalyticsDataStore = new URL('../../images/aws/iot-analytics_data-store.svg', import.meta.url);
const iotAnalyticsNotebook = new URL('../../images/aws/iot-analytics_notebook.svg', import.meta.url);
const iotAnalyticsPipeline = new URL('../../images/aws/iot-analytics_pipeline.svg', import.meta.url);
const iotButton = new URL('../../images/aws/iot-button.svg', import.meta.url);
const iotCertificate = new URL('../../images/aws/iot_certificate.svg', import.meta.url);
const iotCore = new URL('../../images/aws/iot-core.svg', import.meta.url);
const iotDesiredState = new URL('../../images/aws/iot_desired-state.svg', import.meta.url);
const iotDeviceDefender = new URL('../../images/aws/iot-device-defender.svg', import.meta.url);
const iotDeviceDefenderIotDeviceJobs = new URL(
  '../../images/aws/iot-device-defender_iot-device-jobs.svg',
  import.meta.url
);
const iotDeviceGateway = new URL('../../images/aws/iot_device-gateway.svg', import.meta.url);
const iotDeviceManagement = new URL('../../images/aws/iot-device-management.svg', import.meta.url);
const iotEcho = new URL('../../images/aws/iot_echo.svg', import.meta.url);
const iotEvents = new URL('../../images/aws/iot-events.svg', import.meta.url);
const iotFireTv = new URL('../../images/aws/iot_fire_tv.svg', import.meta.url);
const iotFireTvStick = new URL('../../images/aws/iot_fire-tv_stick.svg', import.meta.url);
const iotGreengrassConnector = new URL('../../images/aws/iot_greengrass_connector.svg', import.meta.url);
const iotGreengrassCore = new URL('../../images/aws/iot-greengrass-core.svg', import.meta.url);
const iotHardwareBoard = new URL('../../images/aws/iot-hardware-board.svg', import.meta.url);
const iotHttp2Protocol = new URL('../../images/aws/iot_http2-protocol.svg', import.meta.url);
const iotHttpProtocol = new URL('../../images/aws/iot_http_protocol.svg', import.meta.url);
const iotLambdaFunction = new URL('../../images/aws/iot_lambda_function.svg', import.meta.url);
const iotMqttProtocol = new URL('../../images/aws/iot_mqtt_protocol.svg', import.meta.url);
const iotOverAirUpdate = new URL('../../images/aws/iot_over-air-update.svg', import.meta.url);
const iotPolicy = new URL('../../images/aws/iot_policy.svg', import.meta.url);
const iotReportedState = new URL('../../images/aws/iot_reported-state.svg', import.meta.url);
const iotRule = new URL('../../images/aws/iot-rule.svg', import.meta.url);
const iotSensor = new URL('../../images/aws/iot_sensor.svg', import.meta.url);
const iotServo = new URL('../../images/aws/iot_servo.svg', import.meta.url);
const iotShadow = new URL('../../images/aws/iot_shadow.svg', import.meta.url);
const iotSimulator = new URL('../../images/aws/iot_simulator.svg', import.meta.url);
const iotSitewise = new URL('../../images/aws/iot-sitewise.svg', import.meta.url);
const iotThingBank = new URL('../../images/aws/iot_thing_bank.svg', import.meta.url);
const iotThingBicycle = new URL('../../images/aws/iot_thing_bicycle.svg', import.meta.url);
const iotThingCamera = new URL('../../images/aws/iot_thing_camera.svg', import.meta.url);
const iotThingCar = new URL('../../images/aws/iot_thing_car.svg', import.meta.url);
const iotThingCart = new URL('../../images/aws/iot_thing_cart.svg', import.meta.url);
const iotThingCoffeePot = new URL('../../images/aws/iot_thing_coffee-pot.svg', import.meta.url);
const iotThingDoorLock = new URL('../../images/aws/iot_thing_door-lock.svg', import.meta.url);
const iotThingFactory = new URL('../../images/aws/iot_thing_factory.svg', import.meta.url);
const iotThingGeneric = new URL('../../images/aws/iot_thing_generic.svg', import.meta.url);
const iotThingHouse = new URL('../../images/aws/iot_thing_house.svg', import.meta.url);
const iotThingLightbulb = new URL('../../images/aws/iot_thing_lightbulb.svg', import.meta.url);
const iotThingMedicalEmergency = new URL('../../images/aws/iot_thing_medical-emergency.svg', import.meta.url);
const iotThingPoliceEmergency = new URL('../../images/aws/iot_thing_police-emergency.svg', import.meta.url);
const iotThingThermostat = new URL('../../images/aws/iot_thing_thermostat.svg', import.meta.url);
const iotThingTravel = new URL('../../images/aws/iot_thing_travel.svg', import.meta.url);
const iotThingUtility = new URL('../../images/aws/iot_thing_utility.svg', import.meta.url);
const iotThingWindfarm = new URL('../../images/aws/iot_thing_windfarm.svg', import.meta.url);
const iotThingsGraph = new URL('../../images/aws/iot-things-graph.svg', import.meta.url);
const iotTopic = new URL('../../images/aws/iot_topic.svg', import.meta.url);
const iq = new URL('../../images/aws/iq.svg', import.meta.url);
const kendra = new URL('../../images/aws/kendra.svg', import.meta.url);
const keyManagementServices = new URL('../../images/aws/key-management-services.svg', import.meta.url);
const keyspaces = new URL('../../images/aws/keyspaces.svg', import.meta.url);
const kinesis = new URL('../../images/aws/kinesis.svg', import.meta.url);
const kinesisDataAnalytics = new URL('../../images/aws/kinesis-data-analytics.svg', import.meta.url);
const kinesisDataStreams = new URL('../../images/aws/kinesis-data-streams.svg', import.meta.url);
const kinesisFirehose = new URL('../../images/aws/kinesis-firehose.svg', import.meta.url);
const kinesisVideoStreams = new URL('../../images/aws/kinesis-video-streams.svg', import.meta.url);
const lakeFormation = new URL('../../images/aws/lake-formation.svg', import.meta.url);
const lakeFormationDataLake = new URL('../../images/aws/lake-formation_data-lake.svg', import.meta.url);
const lambda = new URL('../../images/aws/lambda.svg', import.meta.url);
const lambdaFunction = new URL('../../images/aws/lambda-function.svg', import.meta.url);
const lex = new URL('../../images/aws/lex.svg', import.meta.url);
const licenseManager = new URL('../../images/aws/license-manager.svg', import.meta.url);
const lightsail = new URL('../../images/aws/lightsail.svg', import.meta.url);
const localZones = new URL('../../images/aws/local-zones.svg', import.meta.url);
const lumberyard = new URL('../../images/aws/lumberyard.svg', import.meta.url);
const macie = new URL('../../images/aws/macie.svg', import.meta.url);
const managedBlockchain = new URL('../../images/aws/managed-blockchain.svg', import.meta.url);
const managedServices = new URL('../../images/aws/managed-services.svg', import.meta.url);
const managedStreamingForKafka = new URL('../../images/aws/managed-streaming-for-kafka.svg', import.meta.url);
const managementConsole = new URL('../../images/aws/management-console.svg', import.meta.url);
const marketplace = new URL('../../images/aws/marketplace.svg', import.meta.url);
const marketplaceAlternate = new URL('../../images/aws/marketplace-alternate.svg', import.meta.url);
const migrationHub = new URL('../../images/aws/migration-hub.svg', import.meta.url);
const mobileClient = new URL('../../images/aws/mobile-client.svg', import.meta.url);
const mq = new URL('../../images/aws/mq.svg', import.meta.url);
const multimedia = new URL('../../images/aws/multimedia.svg', import.meta.url);
const neptune = new URL('../../images/aws/neptune.svg', import.meta.url);
const neuronMlSdk = new URL('../../images/aws/neuron-ml-sdk.svg', import.meta.url);
const nitroEnclaves = new URL('../../images/aws/nitro-enclaves.svg', import.meta.url);
const nlb = new URL('../../images/aws/nlb.svg', import.meta.url);
const officeBuilding = new URL('../../images/aws/office-building.svg', import.meta.url);
const opsworks = new URL('../../images/aws/opsworks.svg', import.meta.url);
const opsworksApps = new URL('../../images/aws/opsworks_apps.svg', import.meta.url);
const opsworksDeployments = new URL('../../images/aws/opsworks_deployments.svg', import.meta.url);
const opsworksInstances = new URL('../../images/aws/opsworks_instances.svg', import.meta.url);
const opsworksLayers = new URL('../../images/aws/opsworks_layers.svg', import.meta.url);
const opsworksMonitoring = new URL('../../images/aws/opsworks-monitoring.svg', import.meta.url);
const opsworksPermissions = new URL('../../images/aws/opsworks_permissions.svg', import.meta.url);
const opsworksResources = new URL('../../images/aws/opsworks_resources.svg', import.meta.url);
const opsworksStack2 = new URL('../../images/aws/opsworks-stack2.svg', import.meta.url);
const organizations = new URL('../../images/aws/organizations.svg', import.meta.url);
const organizationsAccount = new URL('../../images/aws/organizations_account.svg', import.meta.url);
const organizationsOrganizationalUnit = new URL(
  '../../images/aws/organizations_organizational-unit.svg',
  import.meta.url
);
const outposts = new URL('../../images/aws/outposts.svg', import.meta.url);
const parallelCluster = new URL('../../images/aws/parallel-cluster.svg', import.meta.url);
const personalHealthDashboard = new URL('../../images/aws/personal-health-dashboard.svg', import.meta.url);
const personalize = new URL('../../images/aws/personalize.svg', import.meta.url);
const pinpoint = new URL('../../images/aws/pinpoint.svg', import.meta.url);
const pinpointJourney = new URL('../../images/aws/pinpoint-journey.svg', import.meta.url);
const polly = new URL('../../images/aws/polly.svg', import.meta.url);
const privatelink = new URL('../../images/aws/privatelink.svg', import.meta.url);
const professionalServices = new URL('../../images/aws/professional-services.svg', import.meta.url);
const quantumLedgerDatabase = new URL('../../images/aws/quantum-ledger-database.svg', import.meta.url);
const quicksight = new URL('../../images/aws/quicksight.svg', import.meta.url);
const rds = new URL('../../images/aws/rds.svg', import.meta.url);
const rdsForVmware = new URL('../../images/aws/rds-for-vmware.svg', import.meta.url);
const rdsInstance = new URL('../../images/aws/rds-instance.svg', import.meta.url);
const rdsInstanceAlternate = new URL('../../images/aws/rds-instance-alternate.svg', import.meta.url);
const redshift = new URL('../../images/aws/redshift.svg', import.meta.url);
const redshiftDenseComputeNode = new URL('../../images/aws/redshift_dense-compute-node.svg', import.meta.url);
const redshiftDenseStorageNode = new URL('../../images/aws/redshift_dense-storage-node.svg', import.meta.url);
const redshiftct = new URL('../../images/aws/redshiftct.svg', import.meta.url);
const rekognition = new URL('../../images/aws/rekognition.svg', import.meta.url);
const rekognitionImage = new URL('../../images/aws/rekognition_image.svg', import.meta.url);
const rekognitionVideo = new URL('../../images/aws/rekognition_video.svg', import.meta.url);
const reservedInstanceReporting = new URL('../../images/aws/reserved-instance-reporting.svg', import.meta.url);
const resourcesAccessManager = new URL('../../images/aws/resources-access-manager.svg', import.meta.url);
const robomaker = new URL('../../images/aws/robomaker.svg', import.meta.url);
const robomakerCloudExtensionsRos = new URL('../../images/aws/robomaker_cloud-extensions-ros.svg', import.meta.url);
const robomakerDevelopmentEnvironment = new URL(
  '../../images/aws/robomaker_development-environment.svg',
  import.meta.url
);
const robomakerFleetManagement = new URL('../../images/aws/robomaker_fleet-management.svg', import.meta.url);
const robomakerSimulation = new URL('../../images/aws/robomaker_simulation.svg', import.meta.url);
const route53 = new URL('../../images/aws/route-53.svg', import.meta.url);
const route53HostedZone = new URL('../../images/aws/route-53-hosted-zone.svg', import.meta.url);
const route53RouteTable = new URL('../../images/aws/route-53_route-table.svg', import.meta.url);
const s3 = new URL('../../images/aws/s3.svg', import.meta.url);
const s3Bucket = new URL('../../images/aws/s3_bucket.svg', import.meta.url);
const s3BucketWithObjects = new URL('../../images/aws/s3_bucket-with-objects.svg', import.meta.url);
const s3GeneralAccessPoints = new URL('../../images/aws/s3_general-access-points.svg', import.meta.url);
const s3Glacier = new URL('../../images/aws/s3-glacier.svg', import.meta.url);
const s3GlacierArchive = new URL('../../images/aws/s3-glacier_archive.svg', import.meta.url);
const s3GlacierDeepArchive = new URL('../../images/aws/s3-glacier-deep-archive.svg', import.meta.url);
const s3GlacierVault = new URL('../../images/aws/s3-glacier_vault.svg', import.meta.url);
const s3IntelligentTiering = new URL('../../images/aws/s3-intelligent-tiering.svg', import.meta.url);
const s3Object = new URL('../../images/aws/s3_object.svg', import.meta.url);
const s3OneZoneIa = new URL('../../images/aws/s3-one-zone-ia.svg', import.meta.url);
const s3Replication = new URL('../../images/aws/s3-replication.svg', import.meta.url);
const s3ReplicationTimeControl = new URL('../../images/aws/s3-replication-time-control.svg', import.meta.url);
const s3StandardIa = new URL('../../images/aws/s3-standard-ia.svg', import.meta.url);
const s3VpcAccessPoints = new URL('../../images/aws/s3_vpc-access-points.svg', import.meta.url);
const sagemaker = new URL('../../images/aws/sagemaker.svg', import.meta.url);
const sagemakerGroundTruth = new URL('../../images/aws/sagemaker-ground-truth.svg', import.meta.url);
const sagemakerModel = new URL('../../images/aws/sagemaker_model.svg', import.meta.url);
const sagemakerNotebook = new URL('../../images/aws/sagemaker_notebook.svg', import.meta.url);
const sagemakerTrain = new URL('../../images/aws/sagemaker_train.svg', import.meta.url);
const samlToken = new URL('../../images/aws/saml-token.svg', import.meta.url);
const savingsPlans = new URL('../../images/aws/savings-plans.svg', import.meta.url);
const sdk = new URL('../../images/aws/sdk.svg', import.meta.url);
const secretsManager = new URL('../../images/aws/secrets-manager.svg', import.meta.url);
const securityHub = new URL('../../images/aws/security-hub.svg', import.meta.url);
const securityHubFinding = new URL('../../images/aws/security-hub_finding.svg', import.meta.url);
const serverMigrationService = new URL('../../images/aws/server-migration-service.svg', import.meta.url);
const serverlessApplicationRepository = new URL(
  '../../images/aws/serverless-application-repository.svg',
  import.meta.url
);
const serviceCatalog = new URL('../../images/aws/service-catalog.svg', import.meta.url);
const ses = new URL('../../images/aws/ses.svg', import.meta.url);
const sesEmail = new URL('../../images/aws/ses_email.svg', import.meta.url);
const shield = new URL('../../images/aws/shield.svg', import.meta.url);
const shieldAdvanced = new URL('../../images/aws/shield-advanced.svg', import.meta.url);
const singleSignOn = new URL('../../images/aws/single-sign-on.svg', import.meta.url);
const siteToSiteVpn = new URL('../../images/aws/site-to-site-vpn.svg', import.meta.url);
const snowball = new URL('../../images/aws/snowball.svg', import.meta.url);
const snowballEdge = new URL('../../images/aws/snowball-edge.svg', import.meta.url);
const snowballImportExport = new URL('../../images/aws/snowball-import-export.svg', import.meta.url);
const snowcone = new URL('../../images/aws/snowcone.svg', import.meta.url);
const snowmobile = new URL('../../images/aws/snowmobile.svg', import.meta.url);
const sns = new URL('../../images/aws/sns.svg', import.meta.url);
const snsEmailNotification = new URL('../../images/aws/sns_email-notification.svg', import.meta.url);
const snsHttpNotification = new URL('../../images/aws/sns_http-notification.svg', import.meta.url);
const snsTopic = new URL('../../images/aws/sns_topic.svg', import.meta.url);
const sqs = new URL('../../images/aws/sqs.svg', import.meta.url);
const sqsMessage = new URL('../../images/aws/sqs_message.svg', import.meta.url);
const sqsQueue = new URL('../../images/aws/sqs_queue.svg', import.meta.url);
const sslPadlock = new URL('../../images/aws/ssl-padlock.svg', import.meta.url);
const standardStorageClass = new URL('../../images/aws/standard-storage-class.svg', import.meta.url);
const stepFunctions = new URL('../../images/aws/step-functions.svg', import.meta.url);
const storageGateway = new URL('../../images/aws/storage-gateway.svg', import.meta.url);
const storageGatewayCachedVolume = new URL('../../images/aws/storage-gateway_cached-volume.svg', import.meta.url);
const storageGatewayFileGateway = new URL('../../images/aws/storage-gateway_file-gateway.svg', import.meta.url);
const storageGatewayNonCachedVolume = new URL(
  '../../images/aws/storage-gateway_non-cached-volume.svg',
  import.meta.url
);
const storageGatewayTapeGateway = new URL('../../images/aws/storage-gateway_tape-gateway.svg', import.meta.url);
const storageGatewayVirtualTapeLibrary = new URL(
  '../../images/aws/storage-gateway_virtual-tape-library.svg',
  import.meta.url
);
const storageGatewayVolumeGateway = new URL('../../images/aws/storage-gateway_volume-gateway.svg', import.meta.url);
const sumerian = new URL('../../images/aws/sumerian.svg', import.meta.url);
const support = new URL('../../images/aws/support.svg', import.meta.url);
const systemManagerAutomation = new URL('../../images/aws/system-manager_automation.svg', import.meta.url);
const systemManagerDocuments = new URL('../../images/aws/system-manager_documents.svg', import.meta.url);
const systemManagerInventory = new URL('../../images/aws/system-manager_inventory.svg', import.meta.url);
const systemManagerMaintenanceWindows = new URL(
  '../../images/aws/system-manager_maintenance-windows.svg',
  import.meta.url
);
const systemManagerOpscenter = new URL('../../images/aws/system-manager_opscenter.svg', import.meta.url);
const systemManagerParameterStore = new URL('../../images/aws/system-manager_parameter-store.svg', import.meta.url);
const systemManagerPatchManager = new URL('../../images/aws/system-manager_patch-manager.svg', import.meta.url);
const systemManagerRunCommand = new URL('../../images/aws/system-manager_run-command.svg', import.meta.url);
const systemManagerStateManager = new URL('../../images/aws/system-manager_state-manager.svg', import.meta.url);
const systemsManager = new URL('../../images/aws/systems-manager.svg', import.meta.url);
const tapeStorage = new URL('../../images/aws/tape-storage.svg', import.meta.url);
const tensorflowOnAws = new URL('../../images/aws/tensorflow-on-aws.svg', import.meta.url);
const textract = new URL('../../images/aws/textract.svg', import.meta.url);
const thinkboxDeadline = new URL('../../images/aws/thinkbox-deadline.svg', import.meta.url);
const thinkboxFrost = new URL('../../images/aws/thinkbox-frost.svg', import.meta.url);
const thinkboxKrakatoa = new URL('../../images/aws/thinkbox-krakatoa.svg', import.meta.url);
const thinkboxSequoia = new URL('../../images/aws/thinkbox-sequoia.svg', import.meta.url);
const thinkboxStoke = new URL('../../images/aws/thinkbox-stoke.svg', import.meta.url);
const thinkboxXmesh = new URL('../../images/aws/thinkbox-xmesh.svg', import.meta.url);
const timestream = new URL('../../images/aws/timestream.svg', import.meta.url);
const toolkit = new URL('../../images/aws/toolkit.svg', import.meta.url);
const toolsAndSdk = new URL('../../images/aws/tools-and-sdk.svg', import.meta.url);
const torchserve = new URL('../../images/aws/torchserve.svg', import.meta.url);
const traditionalServer = new URL('../../images/aws/traditional-server.svg', import.meta.url);
const trainingCertification = new URL('../../images/aws/training-certification.svg', import.meta.url);
const transcribe = new URL('../../images/aws/transcribe.svg', import.meta.url);
const transferFamily = new URL('../../images/aws/transfer-family.svg', import.meta.url);
const transferFamilyAwsFtp = new URL('../../images/aws/transfer-family_aws-ftp.svg', import.meta.url);
const transferFamilyAwsFtps = new URL('../../images/aws/transfer-family_aws-ftps.svg', import.meta.url);
const transferFamilyAwsSftp = new URL('../../images/aws/transfer-family_aws-sftp.svg', import.meta.url);
const transitGateway = new URL('../../images/aws/transit-gateway.svg', import.meta.url);
const translate = new URL('../../images/aws/translate.svg', import.meta.url);
const trustedAdvisor = new URL('../../images/aws/trusted-advisor.svg', import.meta.url);
const trustedAdvisorChecklist = new URL('../../images/aws/trusted-advisor_checklist.svg', import.meta.url);
const trustedAdvisorChecklistCost = new URL('../../images/aws/trusted-advisor_checklist-cost.svg', import.meta.url);
const trustedAdvisorChecklistFaultTolerant = new URL(
  '../../images/aws/trusted-advisor_checklist-fault-tolerant.svg',
  import.meta.url
);
const trustedAdvisorChecklistPerformance = new URL(
  '../../images/aws/trusted-advisor_checklist-performance.svg',
  import.meta.url
);
const trustedAdvisorChecklistSecurity = new URL(
  '../../images/aws/trusted-advisor_checklist-security.svg',
  import.meta.url
);
const user = new URL('../../images/aws/user.svg', import.meta.url);
const users = new URL('../../images/aws/users.svg', import.meta.url);
const virtualPrivateCloud = new URL('../../images/aws/virtual-private-cloud.svg', import.meta.url);
const vmwareCloudOnAws = new URL('../../images/aws/vmware-cloud-on-aws.svg', import.meta.url);
const vpcCustomerGateway = new URL('../../images/aws/vpc_customer-gateway.svg', import.meta.url);
const vpcElasticNetworkAdapter = new URL('../../images/aws/vpc_elastic-network-adapter.svg', import.meta.url);
const vpcElasticNetworkInterface = new URL('../../images/aws/vpc_elastic-network-interface.svg', import.meta.url);
const vpcEndpoints = new URL('../../images/aws/vpc_endpoints.svg', import.meta.url);
const vpcFlowLogs = new URL('../../images/aws/vpc_flow-logs.svg', import.meta.url);
const vpcInternetGateway = new URL('../../images/aws/vpc_internet-gateway.svg', import.meta.url);
const vpcNatGateway = new URL('../../images/aws/vpc_nat-gateway.svg', import.meta.url);
const vpcNetworkAccessControlList = new URL('../../images/aws/vpc_network-access-control-list.svg', import.meta.url);
const vpcPeeringConnection = new URL('../../images/aws/vpc_peering-connection.svg', import.meta.url);
const vpcRouter = new URL('../../images/aws/vpc_router.svg', import.meta.url);
const vpcTrafficMirroring = new URL('../../images/aws/vpc_traffic-mirroring.svg', import.meta.url);
const vpcVpnConnection = new URL('../../images/aws/vpc_vpn-connection.svg', import.meta.url);
const vpcVpnGateway = new URL('../../images/aws/vpc_vpn-gateway.svg', import.meta.url);
const vpn = new URL('../../images/aws/vpn.svg', import.meta.url);
const waf = new URL('../../images/aws/waf.svg', import.meta.url);
const wafFilteringRule = new URL('../../images/aws/waf_filtering-rule.svg', import.meta.url);
const wavelength = new URL('../../images/aws/wavelength.svg', import.meta.url);
const wellArchitectTool = new URL('../../images/aws/well-architect-tool.svg', import.meta.url);
const workdocs = new URL('../../images/aws/workdocs.svg', import.meta.url);
const worklink = new URL('../../images/aws/worklink.svg', import.meta.url);
const workmail = new URL('../../images/aws/workmail.svg', import.meta.url);
const workspaces = new URL('../../images/aws/workspaces.svg', import.meta.url);
const xRay = new URL('../../images/aws/x-ray.svg', import.meta.url);

export {
  alb,
  alexaForBusiness,
  amplifyConsole,
  apacheMxnet,
  apiGateway,
  apiGatewayEndpoint,
  appConfig,
  appMesh,
  appMeshMesh,
  appMeshVirtualGateway,
  appMeshVirtualNode,
  appMeshVirtualRouter,
  appMeshVirtualService,
  appStream,
  appWizard,
  applicationAutoScaling,
  applicationDiscoveryService,
  appsync,
  artifact,
  athena,
  augmentedAiA2I,
  aurora,
  auroraInstance,
  auroraInstanceAlternate,
  auroraMariadbInstance,
  auroraMariadbInstanceAlternate,
  auroraMysqlInstance,
  auroraMysqlInstanceAlternate,
  auroraOracleInstance,
  auroraOracleInstanceAlternate,
  auroraPiops,
  auroraPostgresqlInstance,
  auroraPostgresqlInstanceAlternate,
  auroraSqlServerInstance,
  auroraSqlServerInstanceAlternate,
  autoScaling,
  backintAgent,
  backup,
  batch,
  bottlerocket,
  braket,
  budgets,
  certificateManager,
  certificateManagerCertificateAuthority,
  chatbot,
  chime,
  client,
  cloud9,
  cloudDevelopmentKit,
  cloudDirectory,
  cloudMapNamespace,
  cloudMapResource,
  cloudMapService,
  cloudTrail,
  cloudendureDisasterRecovery,
  cloudendureMigration,
  cloudformation,
  cloudformationChangeSet,
  cloudformationStack,
  cloudformationTemplate,
  cloudfront,
  cloudfrontDownloadDistribution,
  cloudfrontEdgeLocation,
  cloudfrontStreamingDistribution,
  cloudhsm,
  cloudmap,
  cloudsearch,
  cloudsearchSearchDocuments,
  cloudwatch,
  cloudwatchAlarm,
  cloudwatchEventBased,
  cloudwatchEventTimeBased,
  cloudwatchLogs,
  cloudwatchRule,
  codeartifact,
  codebuild,
  codecommit,
  codedeploy,
  codeguru,
  codepipeline,
  codestar,
  cognito,
  commandLineInterface,
  comprehend,
  computeOptimizer,
  config,
  connect,
  consoleMobileApplication,
  controlTower,
  costAndUsageReport,
  costExplorer,
  dataExchange,
  dataPipeline,
  dataSync,
  databaseAmazonRdsProxy,
  databaseAmazonRdsProxyAlternate,
  databaseMigration,
  databaseMigrationWorkflowJob,
  datasyncAgent,
  deepComposer,
  deepLearningAmis,
  deepLearningContainers,
  deepLens,
  deepracer,
  detective,
  deviceFarm,
  directConnect,
  directConnectGateway,
  directoryService,
  directoryServiceAdConnector,
  directoryServiceAwsManagedMicrosoftAd,
  directoryServiceSimpleAd,
  disk,
  documentdb,
  dynamodb,
  dynamodbAmazonDynamodbAccelerator,
  dynamodbAttribute,
  dynamodbAttributes,
  dynamodbGlobalSecondaryIndex,
  dynamodbItem,
  dynamodbItems,
  dynamodbTable,
  ebs,
  ebsMultipleVolumes,
  ebsSnapshot,
  ebsVolume,
  ec2,
  ec2A1Instance,
  ec2AmiResource,
  ec2AutoScaling,
  ec2AwsInferentia,
  ec2C4Instance,
  ec2C5Instance,
  ec2C5NInstance,
  ec2C6GInstance,
  ec2D2Instance,
  ec2DbInstance,
  ec2ElasticIpAddress,
  ec2F1Instance,
  ec2G3Instance,
  ec2H1Instance,
  ec2HmiInstance,
  ec2I3Instance,
  ec2ImageBuilder,
  ec2Instance,
  ec2InstanceWithCloudwatch,
  ec2Instances,
  ec2M4Instance,
  ec2M5AInstance,
  ec2M5Instance,
  ec2M5N,
  ec2M5NInstance,
  ec2M6GInstance,
  ec2P2Instance,
  ec2P3Instance,
  ec2R4Instance,
  ec2R5AInstance,
  ec2R5Instance,
  ec2R5N,
  ec2R5NInstance,
  ec2R6GInstance,
  ec2Rescue,
  ec2SpotInstance,
  ec2T2Instance,
  ec2T3Instance,
  ec2X1EInstance,
  ec2X1Instance,
  ec2Z1DInstance,
  ecr,
  ecrImage,
  ecrRegistry,
  ecs,
  ecsContainer1,
  ecsContainer2,
  ecsContainer3,
  ecsService,
  ecsTask,
  efs,
  efsFileSystem,
  elasticBeanstalk,
  elasticBeanstalkApplication,
  elasticBeanstalkDeployment,
  elasticContainerKubernetes,
  elasticInference,
  elasticTranscoder,
  elasticache,
  elasticacheCacheNode,
  elasticacheForMemcached,
  elasticacheForRedis,
  elasticsearchService,
  elb,
  elbClassicLoadBalancer,
  elementalAppliancesAndSoftware,
  elementalLink,
  elementalMediaconnect,
  elementalMediaconvert,
  elementalMedialive,
  elementalMediapackage,
  elementalMediastore,
  elementalMediatailor,
  email,
  emr,
  emrCluster,
  emrEngine,
  emrEngineMaprM3,
  emrEngineMaprM5,
  emrEngineMaprM7,
  emrHdfsCluster,
  eventbridge,
  eventbridgeCustomEventBus,
  eventbridgeDefaultEventBus,
  eventbridgeEvent,
  eventbridgeRule,
  eventbridgeSaasPartnerEvent,
  expressWorkflow,
  fargate,
  firewall,
  firewallManager,
  forecast,
  forums,
  fraudDetector,
  freertos,
  fsx,
  fsxForLustre,
  fsxForWfs,
  gamelift,
  general,
  generalAlternate,
  genericDatabase,
  glacier,
  globalAccelerator,
  glue,
  glueCrawler,
  glueDataCatalog,
  groundStation,
  guardduty,
  iam,
  iamAccessAnalyzer,
  iamAddOn,
  iamDataEncryptionKey,
  iamEncryptedData,
  iamLongTermSecurityCredential,
  iamMfaToken,
  iamPermissions,
  iamRole,
  iamSts,
  iamStsAlternate,
  iamTemporarySecurityCredential,
  infrequentAccessStorageClass,
  inspector,
  inspectorAgent,
  interactiveVideo,
  internetAlt1,
  internetAlt2,
  internetGateway,
  iot1Click,
  iotAction,
  iotActuator,
  iotAlexaEnabledDevice,
  iotAlexaSkill,
  iotAlexaVoiceService,
  iotAnalytics,
  iotAnalyticsChannel,
  iotAnalyticsDataSet,
  iotAnalyticsDataStore,
  iotAnalyticsNotebook,
  iotAnalyticsPipeline,
  iotButton,
  iotCertificate,
  iotCore,
  iotDesiredState,
  iotDeviceDefender,
  iotDeviceDefenderIotDeviceJobs,
  iotDeviceGateway,
  iotDeviceManagement,
  iotEcho,
  iotEvents,
  iotFireTv,
  iotFireTvStick,
  iotGreengrassConnector,
  iotGreengrassCore,
  iotHardwareBoard,
  iotHttp2Protocol,
  iotHttpProtocol,
  iotLambdaFunction,
  iotMqttProtocol,
  iotOverAirUpdate,
  iotPolicy,
  iotReportedState,
  iotRule,
  iotSensor,
  iotServo,
  iotShadow,
  iotSimulator,
  iotSitewise,
  iotThingBank,
  iotThingBicycle,
  iotThingCamera,
  iotThingCar,
  iotThingCart,
  iotThingCoffeePot,
  iotThingDoorLock,
  iotThingFactory,
  iotThingGeneric,
  iotThingHouse,
  iotThingLightbulb,
  iotThingMedicalEmergency,
  iotThingPoliceEmergency,
  iotThingThermostat,
  iotThingTravel,
  iotThingUtility,
  iotThingWindfarm,
  iotThingsGraph,
  iotTopic,
  iq,
  kendra,
  keyManagementServices,
  keyspaces,
  kinesis,
  kinesisDataAnalytics,
  kinesisDataStreams,
  kinesisFirehose,
  kinesisVideoStreams,
  lakeFormation,
  lakeFormationDataLake,
  lambda,
  lambdaFunction,
  lex,
  licenseManager,
  lightsail,
  localZones,
  lumberyard,
  macie,
  managedBlockchain,
  managedServices,
  managedStreamingForKafka,
  managementConsole,
  marketplace,
  marketplaceAlternate,
  migrationHub,
  mobileClient,
  mq,
  multimedia,
  neptune,
  neuronMlSdk,
  nitroEnclaves,
  nlb,
  officeBuilding,
  opsworks,
  opsworksApps,
  opsworksDeployments,
  opsworksInstances,
  opsworksLayers,
  opsworksMonitoring,
  opsworksPermissions,
  opsworksResources,
  opsworksStack2,
  organizations,
  organizationsAccount,
  organizationsOrganizationalUnit,
  outposts,
  parallelCluster,
  personalHealthDashboard,
  personalize,
  pinpoint,
  pinpointJourney,
  polly,
  privatelink,
  professionalServices,
  quantumLedgerDatabase,
  quicksight,
  rds,
  rdsForVmware,
  rdsInstance,
  rdsInstanceAlternate,
  redshift,
  redshiftDenseComputeNode,
  redshiftDenseStorageNode,
  redshiftct,
  rekognition,
  rekognitionImage,
  rekognitionVideo,
  reservedInstanceReporting,
  resourcesAccessManager,
  robomaker,
  robomakerCloudExtensionsRos,
  robomakerDevelopmentEnvironment,
  robomakerFleetManagement,
  robomakerSimulation,
  route53,
  route53HostedZone,
  route53RouteTable,
  s3,
  s3Bucket,
  s3BucketWithObjects,
  s3GeneralAccessPoints,
  s3Glacier,
  s3GlacierArchive,
  s3GlacierDeepArchive,
  s3GlacierVault,
  s3IntelligentTiering,
  s3Object,
  s3OneZoneIa,
  s3Replication,
  s3ReplicationTimeControl,
  s3StandardIa,
  s3VpcAccessPoints,
  sagemaker,
  sagemakerGroundTruth,
  sagemakerModel,
  sagemakerNotebook,
  sagemakerTrain,
  samlToken,
  savingsPlans,
  sdk,
  secretsManager,
  securityHub,
  securityHubFinding,
  serverMigrationService,
  serverlessApplicationRepository,
  serviceCatalog,
  ses,
  sesEmail,
  shield,
  shieldAdvanced,
  singleSignOn,
  siteToSiteVpn,
  snowball,
  snowballEdge,
  snowballImportExport,
  snowcone,
  snowmobile,
  sns,
  snsEmailNotification,
  snsHttpNotification,
  snsTopic,
  sqs,
  sqsMessage,
  sqsQueue,
  sslPadlock,
  standardStorageClass,
  stepFunctions,
  storageGateway,
  storageGatewayCachedVolume,
  storageGatewayFileGateway,
  storageGatewayNonCachedVolume,
  storageGatewayTapeGateway,
  storageGatewayVirtualTapeLibrary,
  storageGatewayVolumeGateway,
  sumerian,
  support,
  systemManagerAutomation,
  systemManagerDocuments,
  systemManagerInventory,
  systemManagerMaintenanceWindows,
  systemManagerOpscenter,
  systemManagerParameterStore,
  systemManagerPatchManager,
  systemManagerRunCommand,
  systemManagerStateManager,
  systemsManager,
  tapeStorage,
  tensorflowOnAws,
  textract,
  thinkboxDeadline,
  thinkboxFrost,
  thinkboxKrakatoa,
  thinkboxSequoia,
  thinkboxStoke,
  thinkboxXmesh,
  timestream,
  toolkit,
  toolsAndSdk,
  torchserve,
  traditionalServer,
  trainingCertification,
  transcribe,
  transferFamily,
  transferFamilyAwsFtp,
  transferFamilyAwsFtps,
  transferFamilyAwsSftp,
  transitGateway,
  translate,
  trustedAdvisor,
  trustedAdvisorChecklist,
  trustedAdvisorChecklistCost,
  trustedAdvisorChecklistFaultTolerant,
  trustedAdvisorChecklistPerformance,
  trustedAdvisorChecklistSecurity,
  user,
  users,
  virtualPrivateCloud,
  vmwareCloudOnAws,
  vpcCustomerGateway,
  vpcElasticNetworkAdapter,
  vpcElasticNetworkInterface,
  vpcEndpoints,
  vpcFlowLogs,
  vpcInternetGateway,
  vpcNatGateway,
  vpcNetworkAccessControlList,
  vpcPeeringConnection,
  vpcRouter,
  vpcTrafficMirroring,
  vpcVpnConnection,
  vpcVpnGateway,
  vpn,
  waf,
  wafFilteringRule,
  wavelength,
  wellArchitectTool,
  workdocs,
  worklink,
  workmail,
  workspaces,
  xRay,
};
